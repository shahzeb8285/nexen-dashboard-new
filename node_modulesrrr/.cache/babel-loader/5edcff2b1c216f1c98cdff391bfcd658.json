{"ast":null,"code":"import _objectWithoutProperties from \"/home/shandroid/Desktop/bird/client/RajBhai/dashboard2/light-blue-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"/home/shandroid/Desktop/bird/client/RajBhai/dashboard2/light-blue-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/shandroid/Desktop/bird/client/RajBhai/dashboard2/light-blue-react-template/src/components/InfoTile/InfoTile.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { UncontrolledTooltip } from 'reactstrap';\nimport s from './InfoTile.module.scss';\nimport classNames from 'classnames';\nimport Loader from '../Loader'; // eslint-disable-line css-modules/no-unused-class\n\nimport AnimateHeight from 'react-animate-height';\nimport uuidv4 from 'uuid/v4';\nimport { DropdownToggle, DropdownMenu, DropdownItem, UncontrolledDropdown, Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\n\nclass InfoTile extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"toggleModal\", () => {\n      this.setState({\n        modal: !this.state.modal\n      });\n    });\n\n    _defineProperty(this, \"handleClose\", () => {\n      this.setState({\n        hideWidget: !this.state.hideWidget\n      });\n    });\n\n    _defineProperty(this, \"handleCollapse\", () => {\n      let heightValue = this.state.collapseWidget ? 'auto' : 0;\n      this.setState({\n        height: heightValue,\n        collapseWidget: !this.state.collapseWidget,\n        reloading: false\n      });\n    });\n\n    _defineProperty(this, \"closeWithModal\", () => {\n      this.toggleModal();\n      this.handleClose();\n    });\n\n    _defineProperty(this, \"handleExpand\", () => {\n      this.setState({\n        height: 'auto',\n        collapseWidget: false\n      });\n    });\n\n    _defineProperty(this, \"handleReload\", () => {\n      const _this$props = this.props,\n            widgetType = _this$props.widgetType,\n            updateWidgetData = _this$props.updateWidgetData;\n      const type = widgetType;\n\n      if (type) {\n        updateWidgetData(type);\n      }\n\n      this.setState({\n        reloading: true\n      });\n      let endpoint = false;\n\n      if (!endpoint) {\n        setTimeout(() => this.setState({\n          reloading: false\n        }), 2000);\n      } else {\n        this.setState({\n          reloading: true\n        });\n        fetch('https://yourapi.com').then(response => response.json()).then(json => this.setState({\n          apiData: json.title\n        })).then(setTimeout(() => this.setState({\n          reloading: false\n        }), 1000));\n      }\n    });\n\n    _defineProperty(this, \"handleFullscreen\", () => {\n      this.setState({\n        fullscreened: !this.state.fullscreened\n      });\n    });\n\n    this.state = {\n      randomId: uuidv4(),\n      hideWidget: false,\n      collapseWidget: !!props.collapsed,\n      height: props.collapsed ? 0 : 'auto',\n      fullscreened: false,\n      reloading: false,\n      modal: false,\n      apiData: ''\n    };\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          title = _this$props2.title,\n          className = _this$props2.className,\n          children = _this$props2.children,\n          close = _this$props2.close,\n          fullscreen = _this$props2.fullscreen,\n          collapse = _this$props2.collapse,\n          refresh = _this$props2.refresh,\n          settings = _this$props2.settings,\n          settingsInverse = _this$props2.settingsInverse,\n          tooltipPlacement = _this$props2.tooltipPlacement,\n          showTooltip = _this$props2.showTooltip,\n          bodyClass = _this$props2.bodyClass,\n          customControls = _this$props2.customControls,\n          customClose = _this$props2.customClose,\n          customExpand = _this$props2.customExpand,\n          customCollapse = _this$props2.customCollapse,\n          customFullscreen = _this$props2.customFullscreen,\n          customReload = _this$props2.customReload,\n          fetchingData = _this$props2.fetchingData,\n          customDropDown = _this$props2.customDropDown,\n          customBody = _this$props2.customBody,\n          prompt = _this$props2.prompt,\n          collapsed = _this$props2.collapsed,\n          widgetType = _this$props2.widgetType,\n          updateWidgetData = _this$props2.updateWidgetData,\n          options = _this$props2.options,\n          attributes = _objectWithoutProperties(_this$props2, [\"title\", \"className\", \"children\", \"close\", \"fullscreen\", \"collapse\", \"refresh\", \"settings\", \"settingsInverse\", \"tooltipPlacement\", \"showTooltip\", \"bodyClass\", \"customControls\", \"customClose\", \"customExpand\", \"customCollapse\", \"customFullscreen\", \"customReload\", \"fetchingData\", \"customDropDown\", \"customBody\", \"prompt\", \"collapsed\", \"widgetType\", \"updateWidgetData\", \"options\"]);\n\n    const mainControls = !!(close || fullscreen || collapse || refresh || settings || settingsInverse);\n    const _this$state = this.state,\n          reloading = _this$state.reloading,\n          fullscreened = _this$state.fullscreened,\n          randomId = _this$state.randomId,\n          height = _this$state.height,\n          hideWidget = _this$state.hideWidget,\n          collapseWidget = _this$state.collapseWidget,\n          modal = _this$state.modal;\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"section\", Object.assign({\n      style: {\n        display: hideWidget ? 'none' : ''\n      },\n      className: classNames('widget', {\n        'fullscreened': !!fullscreened,\n        'collapsed': !!collapseWidget\n      }, s.widget, className, reloading || fetchingData ? s.reloading : '')\n    }, attributes, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 7\n      }\n    }), title && (typeof title === 'string' ? /*#__PURE__*/React.createElement(\"h5\", {\n      className: s.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }\n    }, title) : /*#__PURE__*/React.createElement(\"header\", {\n      className: s.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }\n    }, title)), !customControls && mainControls && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(s.widgetControls, \" widget-controls\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 13\n      }\n    }, settings && /*#__PURE__*/React.createElement(\"button\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"la la-cog\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 25\n      }\n    })), settingsInverse && /*#__PURE__*/React.createElement(\"button\", {\n      className: \"bg-gray-transparent \".concat(s.inverse),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"la la-cog text-white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 72\n      }\n    })), refresh && /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleReload,\n      id: \"reloadId-\".concat(randomId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 17\n      }\n    }, typeof refresh === 'string' ? /*#__PURE__*/React.createElement(\"strong\", {\n      className: \"text-gray-light\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 21\n      }\n    }, refresh) : /*#__PURE__*/React.createElement(\"i\", {\n      className: \"la la-refresh\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 21\n      }\n    }), showTooltip && /*#__PURE__*/React.createElement(UncontrolledTooltip, {\n      placement: tooltipPlacement,\n      target: \"reloadId-\".concat(randomId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 21\n      }\n    }, \"Reload\")), fullscreen && /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleFullscreen,\n      id: \"fullscreenId-\".concat(randomId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"glyphicon glyphicon-resize-\".concat(fullscreened ? 'small' : 'full'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 19\n      }\n    }), showTooltip && /*#__PURE__*/React.createElement(UncontrolledTooltip, {\n      placement: tooltipPlacement,\n      target: \"fullscreenId-\".concat(randomId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 21\n      }\n    }, \"Fullscreen\")), !fullscreened && collapse && /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleCollapse,\n      id: \"collapseId-\".concat(randomId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"la la-angle-\".concat(!collapseWidget ? 'down' : 'up'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 21\n      }\n    }), showTooltip && /*#__PURE__*/React.createElement(UncontrolledTooltip, {\n      placement: tooltipPlacement,\n      target: \"collapseId-\".concat(randomId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 25\n      }\n    }, \"Collapse\"))), !fullscreened && (close && !prompt ? /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleClose,\n      id: \"closeId-\".concat(randomId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 17\n      }\n    }, typeof close === 'string' ? /*#__PURE__*/React.createElement(\"strong\", {\n      className: \"text-gray-light\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 21\n      }\n    }, close) : /*#__PURE__*/React.createElement(\"i\", {\n      className: \"la la-remove\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 21\n      }\n    }), showTooltip && /*#__PURE__*/React.createElement(UncontrolledTooltip, {\n      placement: tooltipPlacement,\n      target: \"closeId-\".concat(randomId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 21\n      }\n    }, \"Close\")) : /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.toggleModal,\n      id: \"closeId-\".concat(randomId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 17\n      }\n    }, typeof close === 'string' ? /*#__PURE__*/React.createElement(\"strong\", {\n      className: \"text-gray-light\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 19\n      }\n    }, close) : /*#__PURE__*/React.createElement(\"i\", {\n      className: \"la la-remove\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 19\n      }\n    }), showTooltip && /*#__PURE__*/React.createElement(UncontrolledTooltip, {\n      placement: tooltipPlacement,\n      target: \"closeId-\".concat(randomId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 19\n      }\n    }, \"Modal\")))), customDropDown && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(s.widgetControls, \" widget-controls\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(UncontrolledDropdown, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(DropdownToggle, {\n      tag: \"span\",\n      \"data-toggle\": \"dropdown\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"glyphicon glyphicon-cog\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(DropdownMenu, {\n      className: \"bg-widget-transparent\",\n      right: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(DropdownItem, {\n      onClick: this.handleReload,\n      title: \"Reload\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 17\n      }\n    }, \"Reload \\xA0\\xA0\", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"badge badge-pill badge-success animate__animated animate__bounceIn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 21\n      }\n    }, \"9\"))), /*#__PURE__*/React.createElement(DropdownItem, {\n      onClick: this.handleFullscreen,\n      title: !fullscreened ? \"Full Screen\" : \"Restore\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 17\n      }\n    }, !fullscreened ? \"Fullscreen\" : \"Restore\", \" \"), /*#__PURE__*/React.createElement(DropdownItem, {\n      divider: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 17\n      }\n    }), !fullscreened && (!prompt ? /*#__PURE__*/React.createElement(DropdownItem, {\n      onClick: this.handleClose,\n      title: \"Close\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 46\n      }\n    }, \"Close\") : /*#__PURE__*/React.createElement(DropdownItem, {\n      onClick: this.toggleModal,\n      title: \"Close\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 19\n      }\n    }, \"Close\"))))), customControls && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(s.widgetControls, \" widget-controls\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 13\n      }\n    }, !fullscreened && (customClose && !prompt ? /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleClose,\n      id: \"closeId-\".concat(randomId),\n      className: s.customControlItem,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      title: \"Close\",\n      className: \"glyphicon glyphicon-remove\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 111\n      }\n    })) : /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.toggleModal,\n      id: \"closeId-\".concat(randomId),\n      className: s.customControlItem,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      title: \"Close\",\n      className: \"glyphicon glyphicon-remove\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 113\n      }\n    }))), !fullscreened && customCollapse && /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleCollapse,\n      id: \"closeId-\".concat(randomId),\n      className: s.customControlItem,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      title: \"Collapse\",\n      className: \"glyphicon glyphicon-chevron-\".concat(!collapseWidget ? 'down' : 'up'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 116\n      }\n    })), customFullscreen && /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleFullscreen,\n      id: \"closeId-\".concat(randomId),\n      className: s.customControlItem,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      title: \"Fullscreen\",\n      className: \"glyphicon glyphicon-resize-\".concat(fullscreened ? 'small' : 'full'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 118\n      }\n    })), customReload && /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleReload,\n      id: \"closeId-\".concat(randomId),\n      className: s.customControlItem,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      title: \"I am spinning!\",\n      className: \"fa fa-refresh\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 114\n      }\n    }))), /*#__PURE__*/React.createElement(AnimateHeight, {\n      duration: 500,\n      height: height,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(s.widgetBody, \" widget-body \").concat(bodyClass),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 11\n      }\n    }, reloading || fetchingData ? /*#__PURE__*/React.createElement(Loader, {\n      className: s.widgetLoader,\n      size: 40,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 43\n      }\n    }) : customBody ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jumbotron handle bg-default text-white mb-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 19\n      }\n    }, \"Draggable story!\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"lead\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"em\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 21\n      }\n    }, \"Build\"), \" your own interfaces! Sit back and relax.\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleFullscreen,\n      className: \"btn btn-danger btn-lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 21\n      }\n    }, !fullscreened ? /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 25\n      }\n    }, \"Fullscreen me! \\xA0\", /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fa fa-check\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 27\n      }\n    })) : 'Go Back')))) : children))), prompt && /*#__PURE__*/React.createElement(Modal, {\n      isOpen: modal,\n      toggle: this.toggleModal,\n      id: \"news-close-modal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ModalHeader, {\n      toggle: this.toggleModal,\n      id: \"news-close-modal-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 9\n      }\n    }, \"Sure?\"), /*#__PURE__*/React.createElement(ModalBody, {\n      className: \"bg-white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 9\n      }\n    }, \"Do you really want to unrevertably remove this super news widget?\"), /*#__PURE__*/React.createElement(ModalFooter, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      color: \"default\",\n      onClick: this.toggleModal,\n      \"data-dismiss\": \"modal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 11\n      }\n    }, \"No\"), ' ', /*#__PURE__*/React.createElement(Button, {\n      color: \"danger\",\n      onClick: this.closeWithModal,\n      id: \"news-widget-remove\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 11\n      }\n    }, \"Yes, remove widget\"))), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: fullscreened ? 'block' : 'none'\n      },\n      className: s.widgetBackground,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 7\n      }\n    }));\n  }\n\n}\n\n_defineProperty(InfoTile, \"propTypes\", {\n  title: PropTypes.node,\n  className: PropTypes.string,\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n  close: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  fullscreen: PropTypes.bool,\n  collapse: PropTypes.bool,\n  refresh: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  settings: PropTypes.bool,\n  settingsInverse: PropTypes.bool,\n  tooltipPlacement: PropTypes.string,\n  showTooltip: PropTypes.bool,\n  bodyClass: PropTypes.string,\n  customControls: PropTypes.bool,\n  options: PropTypes.object,\n  //eslint-disable-line,\n  fetchingData: PropTypes.bool\n});\n\n_defineProperty(InfoTile, \"defaultProps\", {\n  title: null,\n  className: '',\n  children: [],\n  close: false,\n  fullscreen: false,\n  collapse: false,\n  refresh: false,\n  settings: false,\n  settingsInverse: false,\n  tooltipPlacement: 'bottom',\n  showTooltip: false,\n  bodyClass: '',\n  customControls: false,\n  customClose: null,\n  customExpand: null,\n  customCollapse: null,\n  customFullscreen: null,\n  customReload: null,\n  customDropDown: null,\n  prompt: false,\n  collapsed: false,\n  options: {},\n  fetchingData: false,\n  widgetType: \"\"\n});\n\nexport default InfoTile;","map":{"version":3,"sources":["/home/shandroid/Desktop/bird/client/RajBhai/dashboard2/light-blue-react-template/src/components/InfoTile/InfoTile.js"],"names":["React","PropTypes","UncontrolledTooltip","s","classNames","Loader","AnimateHeight","uuidv4","DropdownToggle","DropdownMenu","DropdownItem","UncontrolledDropdown","Button","Modal","ModalHeader","ModalBody","ModalFooter","InfoTile","Component","constructor","props","setState","modal","state","hideWidget","heightValue","collapseWidget","height","reloading","toggleModal","handleClose","widgetType","updateWidgetData","type","endpoint","setTimeout","fetch","then","response","json","apiData","title","fullscreened","randomId","collapsed","render","className","children","close","fullscreen","collapse","refresh","settings","settingsInverse","tooltipPlacement","showTooltip","bodyClass","customControls","customClose","customExpand","customCollapse","customFullscreen","customReload","fetchingData","customDropDown","customBody","prompt","options","attributes","mainControls","display","widget","widgetControls","inverse","handleReload","handleFullscreen","handleCollapse","customControlItem","widgetBody","widgetLoader","closeWithModal","widgetBackground","node","string","oneOfType","arrayOf","bool","object"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { UncontrolledTooltip } from 'reactstrap';\nimport s from './InfoTile.module.scss';\nimport classNames from 'classnames';\nimport Loader from '../Loader'; // eslint-disable-line css-modules/no-unused-class\nimport AnimateHeight from 'react-animate-height';\nimport uuidv4 from 'uuid/v4'\nimport {\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  UncontrolledDropdown,\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n} from 'reactstrap';\n\nclass InfoTile extends React.Component {\n  static propTypes = {\n    title: PropTypes.node,\n    className: PropTypes.string,\n    children: PropTypes.oneOfType([\n      PropTypes.arrayOf(PropTypes.node),\n      PropTypes.node,\n    ]),\n    close: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n    fullscreen: PropTypes.bool,\n    collapse: PropTypes.bool,\n    refresh: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n    settings: PropTypes.bool,\n    settingsInverse: PropTypes.bool,\n    tooltipPlacement: PropTypes.string,\n    showTooltip: PropTypes.bool,\n    bodyClass: PropTypes.string,\n    customControls: PropTypes.bool,\n    options: PropTypes.object, //eslint-disable-line,\n    fetchingData: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    title: null,\n    className: '',\n    children: [],\n    close: false,\n    fullscreen: false,\n    collapse: false,\n    refresh: false,\n    settings: false,\n    settingsInverse: false,\n    tooltipPlacement: 'bottom',\n    showTooltip: false,\n    bodyClass: '',\n    customControls: false,\n    customClose: null,\n    customExpand: null,\n    customCollapse: null,\n    customFullscreen: null,\n    customReload: null,\n    customDropDown: null,\n    prompt: false,\n    collapsed: false,\n    options: {},\n    fetchingData: false,\n    widgetType: \"\",\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      randomId: uuidv4(),\n      hideWidget: false,\n      collapseWidget: !!props.collapsed,\n      height:  props.collapsed ? 0 : 'auto',\n      fullscreened: false,\n      reloading: false,\n      modal: false,\n      apiData: ''\n    }\n\n  }\n\n\n\n  toggleModal = () => {\n    this.setState({ modal: !this.state.modal });\n  }\n\n  handleClose = () => {\n    this.setState({ hideWidget: !this.state.hideWidget})\n  }\n\n  handleCollapse = () => {\n    let heightValue = this.state.collapseWidget ? 'auto' : 0\n    this.setState({\n      height: heightValue,\n      collapseWidget: !this.state.collapseWidget,\n      reloading: false\n    });\n\n  };\n\n  closeWithModal = () => {\n    this.toggleModal();\n    this.handleClose();\n  }\n\n  handleExpand = () => {\n\n    this.setState({\n      height: 'auto',\n      collapseWidget: false\n    });\n\n  };\n\n  handleReload = () => {\n    const { widgetType, updateWidgetData } = this.props;\n    const type = widgetType;\n    if(type) {\n      updateWidgetData(type)\n    }\n    this.setState({ reloading: true });\n    let endpoint = false;\n    if(!endpoint) {\n      setTimeout(() => this.setState({ reloading: false }),2000);\n    } else {\n      this.setState({ reloading: true });\n      fetch('https://yourapi.com')\n        .then(response => response.json())\n        .then(json => this.setState({ apiData: json.title}))\n        .then(setTimeout(() => this.setState({ reloading: false }), 1000))\n    }\n  }\n\n  handleFullscreen = () => {\n    this.setState({ fullscreened: !this.state.fullscreened });\n  }\n\n  render() {\n\n    const {\n      title,\n      className,\n      children,\n      close,\n      fullscreen,\n      collapse,\n      refresh,\n      settings,\n      settingsInverse,\n      tooltipPlacement,\n      showTooltip,\n      bodyClass,\n      customControls,\n      customClose,\n      customExpand,\n      customCollapse,\n      customFullscreen,\n      customReload,\n      fetchingData,\n      customDropDown,\n      customBody,\n      prompt,\n      collapsed,\n      widgetType,\n      updateWidgetData,\n      options, //eslint-disable-line\n      ...attributes\n    } = this.props;\n    const mainControls = !!(close || fullscreen || collapse || refresh || settings || settingsInverse);\n\n    const {\n      reloading,\n      fullscreened,\n      randomId,\n      height,\n      hideWidget,\n      collapseWidget,\n      modal,\n    } = this.state;\n\n\n\n    return (\n    <React.Fragment>\n      <section\n        style={{display: hideWidget ? 'none' : ''}}\n        className={\n          classNames('widget', {'fullscreened' : !!fullscreened, 'collapsed' : !!collapseWidget}, s.widget, className, (reloading || fetchingData) ? s.reloading : '')\n        } {...attributes}\n        >\n        {\n          title && (\n            typeof title === 'string'\n              ? <h5 className={s.title}>{title}</h5>\n              : <header className={s.title}>{title}</header>\n          )\n        }\n\n        {\n          !customControls && mainControls && (\n            <div className={`${s.widgetControls} widget-controls`}>\n              {settings && (\n                <button><i className=\"la la-cog\" /></button>\n              )}\n              {settingsInverse && (\n                <button className={`bg-gray-transparent ${s.inverse}`}><i\n                  className=\"la la-cog text-white\"\n                /></button>\n              )}\n              {refresh && (\n                <button onClick={this.handleReload} id={`reloadId-${randomId}`}>\n                  {typeof refresh === 'string' ?\n                    <strong className=\"text-gray-light\">{refresh}</strong> :\n                    <i className=\"la la-refresh\" />}\n                  {showTooltip && (\n                    <UncontrolledTooltip\n                      placement={tooltipPlacement}\n                      target={`reloadId-${randomId}`}\n                    >Reload</UncontrolledTooltip>\n                  )}\n                </button>\n              )}\n              {fullscreen && (\n                <button onClick={this.handleFullscreen} id={`fullscreenId-${randomId}`}>\n                  <i className={`glyphicon glyphicon-resize-${fullscreened ? 'small' : 'full'}`} />\n                  {showTooltip && (\n                    <UncontrolledTooltip\n                      placement={tooltipPlacement}\n                      target={`fullscreenId-${randomId}`}\n                    >Fullscreen</UncontrolledTooltip>\n                  )}\n                </button>\n              )}\n              {!fullscreened &&\n                collapse && (\n                  <span>\n                    <button onClick={this.handleCollapse} id={`collapseId-${randomId}`}>\n                    <i className={`la la-angle-${!collapseWidget ? 'down' : 'up'}`} />\n                      {showTooltip && (\n                        <UncontrolledTooltip\n                          placement={tooltipPlacement}\n                          target={`collapseId-${randomId}`}\n                        >Collapse</UncontrolledTooltip>\n                      )}\n                    </button>\n                  </span>\n                )\n              }\n              {!fullscreened && (\n                (close && !prompt) ? (\n                <button onClick={this.handleClose} id={`closeId-${randomId}`}>\n                  {typeof close === 'string' ?\n                    <strong className=\"text-gray-light\">{close}</strong> :\n                    <i className=\"la la-remove\" />}\n                  {showTooltip && (\n                    <UncontrolledTooltip\n                      placement={tooltipPlacement}\n                      target={`closeId-${randomId}`}\n                    >Close</UncontrolledTooltip>\n                  )}\n                </button>\n              ) : (\n                <button onClick={this.toggleModal} id={`closeId-${randomId}`}>\n                {typeof close === 'string' ?\n                  <strong className=\"text-gray-light\">{close}</strong> :\n                  <i className=\"la la-remove\" />}\n                {showTooltip && (\n                  <UncontrolledTooltip\n                    placement={tooltipPlacement}\n                    target={`closeId-${randomId}`}\n                  >Modal</UncontrolledTooltip>\n                )}\n              </button>\n              ))}\n            </div>\n          )}\n          {customDropDown && (\n            <div className={`${s.widgetControls} widget-controls`}>\n            <UncontrolledDropdown>\n              <DropdownToggle\n                tag=\"span\"\n                data-toggle=\"dropdown\"\n\n              >\n                <i className=\"glyphicon glyphicon-cog\" />\n              </DropdownToggle>\n              <DropdownMenu className=\"bg-widget-transparent\" right>\n                <DropdownItem onClick={this.handleReload} title=\"Reload\">\n                  Reload &nbsp;&nbsp;\n                  <span className=\"badge badge-pill badge-success animate__animated animate__bounceIn\">\n                    <strong>9</strong>\n                  </span>\n                </DropdownItem>\n\n                <DropdownItem onClick={this.handleFullscreen} title={!fullscreened ? \"Full Screen\" : \"Restore\"}>{!fullscreened ? \"Fullscreen\" : \"Restore\"} </DropdownItem>\n                <DropdownItem divider />\n                {!fullscreened && (!prompt ? <DropdownItem onClick={this.handleClose} title=\"Close\">Close</DropdownItem>\n                : <DropdownItem onClick={this.toggleModal} title=\"Close\">Close</DropdownItem>)}\n              </DropdownMenu>\n            </UncontrolledDropdown>\n            </div>\n          )}\n        {\n          customControls && (\n            <div className={`${s.widgetControls} widget-controls`}>\n              {!fullscreened && ((customClose && !prompt) ? (\n                <button onClick={this.handleClose} id={`closeId-${randomId}`} className={s.customControlItem}><i title=\"Close\" className=\"glyphicon glyphicon-remove\"/></button>\n              ) : (\n                  <button onClick={this.toggleModal} id={`closeId-${randomId}`} className={s.customControlItem}><i title=\"Close\" className=\"glyphicon glyphicon-remove\"/></button>\n              ))}\n              {!fullscreened && (customCollapse && (\n                  <button onClick={this.handleCollapse} id={`closeId-${randomId}`} className={s.customControlItem}><i title=\"Collapse\" className={`glyphicon glyphicon-chevron-${!collapseWidget ? 'down' : 'up'}`}/></button>\n              ))}\n              {customFullscreen && (\n                  <button onClick={this.handleFullscreen} id={`closeId-${randomId}`} className={s.customControlItem}><i title=\"Fullscreen\" className={`glyphicon glyphicon-resize-${fullscreened ? 'small' : 'full'}`} /></button>\n              )}\n              {customReload && (\n                  <button onClick={this.handleReload} id={`closeId-${randomId}`} className={s.customControlItem}><i title=\"I am spinning!\" className=\"fa fa-refresh\" /></button>\n              )}\n            </div>\n          )\n        }\n        <AnimateHeight\n          duration={ 500 }\n          height={ height }\n        >\n\n          <div className={`${s.widgetBody} widget-body ${bodyClass}`}>\n            {reloading || fetchingData ?  <Loader className={s.widgetLoader} size={40}/> : customBody ? (\n                <div className=\"jumbotron handle bg-default text-white mb-0\">\n                <div className=\"container\">\n                  <h1>Draggable story!</h1>\n                  <p className=\"lead\">\n                    <em>Build</em> your own\n                    interfaces! Sit back and relax.\n                  </p>\n                  <p className=\"text-center\">\n                    <button onClick={this.handleFullscreen} className=\"btn btn-danger btn-lg\">\n                      {!fullscreened ?\n                        <React.Fragment>Fullscreen me! &nbsp;\n                          <i className=\"fa fa-check\" />\n                        </React.Fragment>\n                        : 'Go Back'\n                      }\n                    </button>\n                  </p>\n                </div>\n              </div>\n            ) : children}\n          </div>\n\n       </AnimateHeight>\n\n      </section>\n      {prompt && (\n        <Modal isOpen={modal} toggle={this.toggleModal} id=\"news-close-modal\">\n        <ModalHeader toggle={this.toggleModal} id=\"news-close-modal-label\">Sure?</ModalHeader>\n        <ModalBody className=\"bg-white\">\n          Do you really want to unrevertably remove this super news widget?\n        </ModalBody>\n        <ModalFooter>\n          <Button color=\"default\" onClick={this.toggleModal} data-dismiss=\"modal\">No</Button>{' '}\n          <Button color=\"danger\" onClick={this.closeWithModal} id=\"news-widget-remove\">Yes,\n            remove widget</Button>\n        </ModalFooter>\n      </Modal>\n      )}\n      <div style={{display: fullscreened ? 'block'  : 'none'}} className={s.widgetBackground}></div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default InfoTile;\n"]},"metadata":{},"sourceType":"module"}