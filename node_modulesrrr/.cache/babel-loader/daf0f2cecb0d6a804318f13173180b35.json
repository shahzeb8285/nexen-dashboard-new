{"ast":null,"code":"/**\r\n * A collection of GeoJSON format-related utility functions.\r\n */\nimport * as $math from \"../../core/utils/Math\";\nimport * as $array from \"../../core/utils/Array\";\n/**\r\n * Normalizes a geo-point.\r\n *\r\n * @ignore Exclude from docs\r\n * @param geoPoint  Source geo-point\r\n * @return Normalized geo-point\r\n */\n\nexport function normalizePoint(geoPoint) {\n  var longitude = wrapAngleTo180(geoPoint.longitude);\n  var latitude = Math.asin(Math.sin(geoPoint.latitude * $math.RADIANS)) * $math.DEGREES;\n  var latitude180 = wrapAngleTo180(geoPoint.latitude);\n\n  if (Math.abs(latitude180) > 90) {\n    longitude = wrapAngleTo180(longitude + 180);\n  }\n\n  geoPoint.longitude = longitude;\n  geoPoint.latitude = latitude;\n  return geoPoint;\n}\n/**\r\n * Normalizes all points of a geo-line.\r\n *\r\n * @ignore Exclude from docs\r\n * @param multiline  Source geo-line\r\n * @return Normalized geo-line\r\n */\n\nexport function normalizeMultiline(multiline) {\n  $array.each(multiline, function (segment) {\n    $array.each(segment, function (point) {\n      normalizePoint(point);\n    });\n  });\n  return multiline;\n}\n/**\r\n * [wrapAngleTo180 description]\r\n *\r\n * @todo Description\r\n * @ignore Exclude from docs\r\n * @param angle  Angle\r\n * @return Angle\r\n */\n\nexport function wrapAngleTo180(angle) {\n  angle = angle % 360;\n\n  if (angle > 180) {\n    angle -= 360;\n  }\n\n  if (angle < -180) {\n    angle += 360;\n  }\n\n  return angle;\n}\n/**\r\n * Converts a geo point to a regular point object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param geoPoint  Source geo point\r\n * @return Point\r\n */\n\nexport function geoToPoint(geoPoint) {\n  return {\n    x: geoPoint.longitude,\n    y: geoPoint.latitude\n  };\n}","map":null,"metadata":{},"sourceType":"module"}